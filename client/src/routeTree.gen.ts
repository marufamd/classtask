/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AuthImport } from './routes/_auth';
import { Route as AppImport } from './routes/_app';
import { Route as IndexImport } from './routes/index';
import { Route as AuthVerifyImport } from './routes/_auth/verify';
import { Route as AuthRegisterImport } from './routes/_auth/register';
import { Route as AuthLoginImport } from './routes/_auth/login';
import { Route as AppProfileImport } from './routes/_app/profile';
import { Route as AppErrorImport } from './routes/_app/error';
import { Route as AppCalendarImport } from './routes/_app/calendar';
import { Route as AppTasksIndexImport } from './routes/_app/tasks/index';
import { Route as AppCoursesIndexImport } from './routes/_app/courses/index';
import { Route as AppTasksTaskIdImport } from './routes/_app/tasks/$taskId';
import { Route as AppCoursesCourseIdImport } from './routes/_app/courses/$courseId';

// Create/Update Routes

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute
} as any);

const AppRoute = AppImport.update({
	id: '/_app',
	getParentRoute: () => rootRoute
} as any);

const IndexRoute = IndexImport.update({
	id: '/',
	path: '/',
	getParentRoute: () => rootRoute
} as any);

const AuthVerifyRoute = AuthVerifyImport.update({
	id: '/verify',
	path: '/verify',
	getParentRoute: () => AuthRoute
} as any);

const AuthRegisterRoute = AuthRegisterImport.update({
	id: '/register',
	path: '/register',
	getParentRoute: () => AuthRoute
} as any);

const AuthLoginRoute = AuthLoginImport.update({
	id: '/login',
	path: '/login',
	getParentRoute: () => AuthRoute
} as any);

const AppProfileRoute = AppProfileImport.update({
	id: '/profile',
	path: '/profile',
	getParentRoute: () => AppRoute
} as any);

const AppErrorRoute = AppErrorImport.update({
	id: '/error',
	path: '/error',
	getParentRoute: () => AppRoute
} as any);

const AppCalendarRoute = AppCalendarImport.update({
	id: '/calendar',
	path: '/calendar',
	getParentRoute: () => AppRoute
} as any);

const AppTasksIndexRoute = AppTasksIndexImport.update({
	id: '/tasks/',
	path: '/tasks/',
	getParentRoute: () => AppRoute
} as any);

const AppCoursesIndexRoute = AppCoursesIndexImport.update({
	id: '/courses/',
	path: '/courses/',
	getParentRoute: () => AppRoute
} as any);

const AppTasksTaskIdRoute = AppTasksTaskIdImport.update({
	id: '/tasks/$taskId',
	path: '/tasks/$taskId',
	getParentRoute: () => AppRoute
} as any);

const AppCoursesCourseIdRoute = AppCoursesCourseIdImport.update({
	id: '/courses/$courseId',
	path: '/courses/$courseId',
	getParentRoute: () => AppRoute
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/_app': {
			id: '/_app';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AppImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth': {
			id: '/_auth';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		'/_app/calendar': {
			id: '/_app/calendar';
			path: '/calendar';
			fullPath: '/calendar';
			preLoaderRoute: typeof AppCalendarImport;
			parentRoute: typeof AppImport;
		};
		'/_app/error': {
			id: '/_app/error';
			path: '/error';
			fullPath: '/error';
			preLoaderRoute: typeof AppErrorImport;
			parentRoute: typeof AppImport;
		};
		'/_app/profile': {
			id: '/_app/profile';
			path: '/profile';
			fullPath: '/profile';
			preLoaderRoute: typeof AppProfileImport;
			parentRoute: typeof AppImport;
		};
		'/_auth/login': {
			id: '/_auth/login';
			path: '/login';
			fullPath: '/login';
			preLoaderRoute: typeof AuthLoginImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/register': {
			id: '/_auth/register';
			path: '/register';
			fullPath: '/register';
			preLoaderRoute: typeof AuthRegisterImport;
			parentRoute: typeof AuthImport;
		};
		'/_auth/verify': {
			id: '/_auth/verify';
			path: '/verify';
			fullPath: '/verify';
			preLoaderRoute: typeof AuthVerifyImport;
			parentRoute: typeof AuthImport;
		};
		'/_app/courses/$courseId': {
			id: '/_app/courses/$courseId';
			path: '/courses/$courseId';
			fullPath: '/courses/$courseId';
			preLoaderRoute: typeof AppCoursesCourseIdImport;
			parentRoute: typeof AppImport;
		};
		'/_app/tasks/$taskId': {
			id: '/_app/tasks/$taskId';
			path: '/tasks/$taskId';
			fullPath: '/tasks/$taskId';
			preLoaderRoute: typeof AppTasksTaskIdImport;
			parentRoute: typeof AppImport;
		};
		'/_app/courses/': {
			id: '/_app/courses/';
			path: '/courses';
			fullPath: '/courses';
			preLoaderRoute: typeof AppCoursesIndexImport;
			parentRoute: typeof AppImport;
		};
		'/_app/tasks/': {
			id: '/_app/tasks/';
			path: '/tasks';
			fullPath: '/tasks';
			preLoaderRoute: typeof AppTasksIndexImport;
			parentRoute: typeof AppImport;
		};
	}
}

// Create and export the route tree

interface AppRouteChildren {
	AppCalendarRoute: typeof AppCalendarRoute;
	AppErrorRoute: typeof AppErrorRoute;
	AppProfileRoute: typeof AppProfileRoute;
	AppCoursesCourseIdRoute: typeof AppCoursesCourseIdRoute;
	AppTasksTaskIdRoute: typeof AppTasksTaskIdRoute;
	AppCoursesIndexRoute: typeof AppCoursesIndexRoute;
	AppTasksIndexRoute: typeof AppTasksIndexRoute;
}

const AppRouteChildren: AppRouteChildren = {
	AppCalendarRoute: AppCalendarRoute,
	AppErrorRoute: AppErrorRoute,
	AppProfileRoute: AppProfileRoute,
	AppCoursesCourseIdRoute: AppCoursesCourseIdRoute,
	AppTasksTaskIdRoute: AppTasksTaskIdRoute,
	AppCoursesIndexRoute: AppCoursesIndexRoute,
	AppTasksIndexRoute: AppTasksIndexRoute
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

interface AuthRouteChildren {
	AuthLoginRoute: typeof AuthLoginRoute;
	AuthRegisterRoute: typeof AuthRegisterRoute;
	AuthVerifyRoute: typeof AuthVerifyRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthLoginRoute: AuthLoginRoute,
	AuthRegisterRoute: AuthRegisterRoute,
	AuthVerifyRoute: AuthVerifyRoute
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/calendar': typeof AppCalendarRoute;
	'/error': typeof AppErrorRoute;
	'/profile': typeof AppProfileRoute;
	'/login': typeof AuthLoginRoute;
	'/register': typeof AuthRegisterRoute;
	'/verify': typeof AuthVerifyRoute;
	'/courses/$courseId': typeof AppCoursesCourseIdRoute;
	'/tasks/$taskId': typeof AppTasksTaskIdRoute;
	'/courses': typeof AppCoursesIndexRoute;
	'/tasks': typeof AppTasksIndexRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'': typeof AuthRouteWithChildren;
	'/calendar': typeof AppCalendarRoute;
	'/error': typeof AppErrorRoute;
	'/profile': typeof AppProfileRoute;
	'/login': typeof AuthLoginRoute;
	'/register': typeof AuthRegisterRoute;
	'/verify': typeof AuthVerifyRoute;
	'/courses/$courseId': typeof AppCoursesCourseIdRoute;
	'/tasks/$taskId': typeof AppTasksTaskIdRoute;
	'/courses': typeof AppCoursesIndexRoute;
	'/tasks': typeof AppTasksIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/_app': typeof AppRouteWithChildren;
	'/_auth': typeof AuthRouteWithChildren;
	'/_app/calendar': typeof AppCalendarRoute;
	'/_app/error': typeof AppErrorRoute;
	'/_app/profile': typeof AppProfileRoute;
	'/_auth/login': typeof AuthLoginRoute;
	'/_auth/register': typeof AuthRegisterRoute;
	'/_auth/verify': typeof AuthVerifyRoute;
	'/_app/courses/$courseId': typeof AppCoursesCourseIdRoute;
	'/_app/tasks/$taskId': typeof AppTasksTaskIdRoute;
	'/_app/courses/': typeof AppCoursesIndexRoute;
	'/_app/tasks/': typeof AppTasksIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| '/'
		| ''
		| '/calendar'
		| '/error'
		| '/profile'
		| '/login'
		| '/register'
		| '/verify'
		| '/courses/$courseId'
		| '/tasks/$taskId'
		| '/courses'
		| '/tasks';
	fileRoutesByTo: FileRoutesByTo;
	to:
		| '/'
		| ''
		| '/calendar'
		| '/error'
		| '/profile'
		| '/login'
		| '/register'
		| '/verify'
		| '/courses/$courseId'
		| '/tasks/$taskId'
		| '/courses'
		| '/tasks';
	id:
		| '__root__'
		| '/'
		| '/_app'
		| '/_auth'
		| '/_app/calendar'
		| '/_app/error'
		| '/_app/profile'
		| '/_auth/login'
		| '/_auth/register'
		| '/_auth/verify'
		| '/_app/courses/$courseId'
		| '/_app/tasks/$taskId'
		| '/_app/courses/'
		| '/_app/tasks/';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AppRoute: typeof AppRouteWithChildren;
	AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AppRoute: AppRouteWithChildren,
	AuthRoute: AuthRouteWithChildren
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/_auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/calendar",
        "/_app/error",
        "/_app/profile",
        "/_app/courses/$courseId",
        "/_app/tasks/$taskId",
        "/_app/courses/",
        "/_app/tasks/"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register",
        "/_auth/verify"
      ]
    },
    "/_app/calendar": {
      "filePath": "_app/calendar.tsx",
      "parent": "/_app"
    },
    "/_app/error": {
      "filePath": "_app/error.tsx",
      "parent": "/_app"
    },
    "/_app/profile": {
      "filePath": "_app/profile.tsx",
      "parent": "/_app"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_auth/verify": {
      "filePath": "_auth/verify.tsx",
      "parent": "/_auth"
    },
    "/_app/courses/$courseId": {
      "filePath": "_app/courses/$courseId.tsx",
      "parent": "/_app"
    },
    "/_app/tasks/$taskId": {
      "filePath": "_app/tasks/$taskId.tsx",
      "parent": "/_app"
    },
    "/_app/courses/": {
      "filePath": "_app/courses/index.tsx",
      "parent": "/_app"
    },
    "/_app/tasks/": {
      "filePath": "_app/tasks/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
